{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Author: Pawel Konieczny (pkonieczny@numerix.com)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Autograph - Basics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example we will show some basic features of the AutoGraph.\n",
    "\n",
    "We will be using the XML file which was created in the first example notebook."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First steps"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "In order to use AutoGraph one should have an Application with some objects inside. This is *NOT* a requirement though, but all our examples will start in the same way, namely we will load an XML file, but in principle one can just create all objects programmatically and/or via XML."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standard imports\n",
    "\n",
    "Let's start with *Standard imports*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:14.704563",
     "start_time": "2016-08-02T16:01:14.014051"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "import NxPySDK as nx  # Numerix SDK\n",
    "\n",
    "# the following is a set of standard tools which will be used throughout the example\n",
    "import NxPyTools.Graph as nxGraph\n",
    "from NxPyTools.NxGraph import AutoGraph\n",
    "from NxPyTools.NxDict import NxDict\n",
    "from NxPyTools.NxGraph import InputAccessors    # for defining inputs\n",
    "from NxPyTools.NxGraph import OutputAccessors   # for defining outputs\n",
    "\n",
    "# the following are common open source tools for data manipulation, plotting and printing\n",
    "import numpy as np   # ndarray support\n",
    "import matplotlib.pyplot as plt   # plotting \n",
    "import pprint   # pretty printing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preparing Application object"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead of creating the structure from previous example we will simply load it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:15.420149",
     "start_time": "2016-08-02T16:01:15.360104"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "RuntimeError",
     "evalue": "WARNING LEVEL WARNING MESSAGE                                   \nFatal         XML parse failure occurred at line 0, character 0.\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-0c63ff16ad28>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mapp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mApplication\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mapp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreadXML\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'../XMLFiles/fx_pricer_manual.xml'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[1;31m# and let's see everything loaded correctly:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mapp\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mRuntimeError\u001b[0m: WARNING LEVEL WARNING MESSAGE                                   \nFatal         XML parse failure occurred at line 0, character 0.\n"
     ]
    }
   ],
   "source": [
    "app = nx.Application()\n",
    "app.readXML('../XMLFiles/fx_pricer_manual.xml')\n",
    "\n",
    "# and let's see everything loaded correctly:\n",
    "print(app)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What do we want to do now?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the previous examples we know how to set up pricing of a single deal.\n",
    "\n",
    "But now the main question is:\n",
    "\n",
    "\n",
    "\n",
    "<big><center>**HOW TO PARAMETRIZE THE DEAL??**</center></big>\n",
    "\n",
    "\n",
    "\n",
    "One obvious answer is to write appropriate code, but then the question is:\n",
    "\n",
    "</br>\n",
    "\n",
    "<big><center>** WHY WOULD I CODE EVERYTHING UP IF JUST ASSEMBLED THAT IN EXCEL? **</center></big>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The answer is: \n",
    "<big><center>**use AutoGraph**</center></big>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic mechanism behind AutoGraph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*AutoGraph* simply traverses all the dependencies between objects and then stores those relationships in a simple data structure.\n",
    "\n",
    "Then it allows you to register *Input Accessors* and *Output Accessors*.\n",
    "\n",
    "  - **Input Accessors** - they take values of parameters and substitute them into appropriate places in the dependencies graph\n",
    "  - **Output Accessors** - they collect results from nodes of the graph and provide them as an output\n",
    "  \n",
    "Once this structure (Graph, Input Accessors, Output Accessors) is defined it can be used as a regular multivariable function. The appropriate method to be called is *pass_variables_and_compute*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Setting up an AutoGraph from the current Application object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:20.119188",
     "start_time": "2016-08-02T16:01:20.111183"
    },
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# creating a dependency graph from that Application\n",
    "g = nxGraph.from_Application(app=app)\n",
    "# and creating an AutoGraph functionality around it\n",
    "auto_graph = AutoGraph(app=app, graph=g)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Parametrizing the solution. This includes providing desired inputs and outputs.\n",
    "\n",
    "When we inspect the graph (see the previous example -- Visualization Tool) we may choose which fields we want to parametrize.\n",
    "\n",
    "For the sake of this example we will choose the following variables:\n",
    "  - BARRIER LEVEL in the instrument object\n",
    "  - USD IR RATE LEVEL in the USD_YC object\n",
    "  - Volatility (Sigma1) in the pricer.\n",
    "This is just to illustrate that one can provide inputs to multiple objects.\n",
    "\n",
    "Let us start with **Input Accessors**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:22.498718",
     "start_time": "2016-08-02T16:01:22.493714"
    },
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# defining inputs\n",
    "auto_graph.add_input('Barrier', InputAccessors.CallFieldAccessor(object_id='FX_GBP_USD_INSTRUMENT', field_id='BARRIER LEVEL'))\n",
    "auto_graph.add_input('R', InputAccessors.CallFieldAccessor(object_id='YC_USD', field_id='RATE/DIVIDEND'))\n",
    "auto_graph.add_input('sigma', InputAccessors.CallFieldAccessor(object_id='FX_BARRIER_PRICER', field_id='Sigma1'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we're in the position to define **Output Accessors**. Let us choose:\n",
    "  - all available outputs from the pricer\n",
    "  - Delta from the pricer\n",
    "Obviously Delta should also a part of all the outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:25.594380",
     "start_time": "2016-08-02T16:01:25.590378"
    },
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# defining outputs\n",
    "auto_graph.add_output('results', OutputAccessors.OutputHeadersAsDictionaryAccessor(object_id='FX_BARRIER_PRICER'))\n",
    "auto_graph.add_output('Delta', OutputAccessors.OutputSingleResultAccessor(object_id='FX_BARRIER_PRICER', field_id='Delta'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><big>**Want to hit F9?**</big></center>\n",
    "Now we can use auto_graph to compute results. We may do this with one line:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:28.547310",
     "start_time": "2016-08-02T16:01:28.542309"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "Node \"FX_GBP_USD_INSTRUMENT\" is not present in the graph",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-c8eb6657b4b8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mall_results\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mauto_graph\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpass_and_compute\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mBarrier\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1.45\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mR\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.04\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0.12\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32mC:\\Python\\NX\\PythonAPI-3.5-64bit-CA-13.1\\NxPyTools\\NxGraph\\AutoGraph.py\u001b[0m in \u001b[0;36mpass_and_compute\u001b[0;34m(self, force_refresh, **kwargs)\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[1;33m:\u001b[0m\u001b[1;32mreturn\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mresults\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mdefined\u001b[0m \u001b[0mby\u001b[0m \u001b[0mOutput\u001b[0m \u001b[0mAccessors\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m         \"\"\"\n\u001b[0;32m--> 161\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpass_variables\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mforce_refresh\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcompute\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\Python\\NX\\PythonAPI-3.5-64bit-CA-13.1\\NxPyTools\\NxGraph\\AutoGraph.py\u001b[0m in \u001b[0;36mpass_variables\u001b[0;34m(self, ignore_non_registered_variables, **kwargs)\u001b[0m\n\u001b[1;32m    113\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mvariable\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__variables_dict\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m                 \u001b[1;32mfor\u001b[0m \u001b[0mselector\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__variables_dict\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mvariable\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m                     \u001b[0mselector\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__graph\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mvariable\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m                 \u001b[0mlogger\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'pass_variables: variable {} not registered with any Input Accessor'\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mvariable\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mC:\\Python\\NX\\PythonAPI-3.5-64bit-CA-13.1\\NxPyTools\\NxGraph\\InputAccessors.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, graph, value)\u001b[0m\n\u001b[1;32m    106\u001b[0m             'CallFieldAccessor: object_id=\"{}\", field_id=\"{}\", value=\"{}\"'.format(self.__object_id, self.__field_id,\n\u001b[1;32m    107\u001b[0m                                                                                   value))\n\u001b[0;32m--> 108\u001b[0;31m         \u001b[1;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__object_id\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mgraph\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'Node \"{}\" is not present in the graph'\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__object_id\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    109\u001b[0m         \u001b[0mnxNode\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgraph\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__object_id\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mGraph\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNXNODE_KEY\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m    110\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mnxNode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnode_type\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mGraph\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNodeType\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mCALL\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAssertionError\u001b[0m: Node \"FX_GBP_USD_INSTRUMENT\" is not present in the graph"
     ]
    }
   ],
   "source": [
    "all_results = auto_graph.pass_and_compute(Barrier=1.45, R=0.04, sigma=0.12)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yes, it's calculated. Let's inspect the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:46.315391",
     "start_time": "2016-08-02T16:01:46.310388"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'all_results' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-9620eeaba198>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Delta: {}'\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_results\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Delta'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m  \u001b[1;31m# printing Delta\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'All results:\\n{}'\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'-'\u001b[0m\u001b[1;33m*\u001b[0m\u001b[1;36m12\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m   \u001b[1;31m# delimiter\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mpprint\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_results\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'results'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m    \u001b[1;31m# pretty printing of all results\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'all_results' is not defined"
     ]
    }
   ],
   "source": [
    "print('Delta: {}'.format(all_results['Delta']))  # printing Delta\n",
    "print('All results:\\n{}'.format('-'*12))   # delimiter\n",
    "pprint.pprint(dict(all_results['results']))    # pretty printing of all results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And let's check that Delta from all results and Delta from the single output accessor are the same:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2016-08-02T16:01:55.017565",
     "start_time": "2016-08-02T16:01:54.998551"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'all_results' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-5f7b8fb44424>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mall_results\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Delta'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mall_results\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'results'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Delta'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[1;31m# note that Output accessor returned a list, so we took the first element from it\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'all_results' is not defined"
     ]
    }
   ],
   "source": [
    "all_results['Delta'][0] == all_results['results']['Delta']\n",
    "# note that Output accessor returned a list, so we took the first element from it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><big>**Now go to Excel and check whether this is the correct result!**</big></center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><big>**ENJOY!**</big></center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: in principle one could even use CAIL to create an Application and we may show an example of that as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  },
  "nav_menu": {},
  "toc": {
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 6,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
